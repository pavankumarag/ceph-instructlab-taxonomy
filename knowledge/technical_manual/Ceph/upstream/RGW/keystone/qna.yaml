version: 3
created_by: Pragadeeswaran Sathyanarayanan
domain: opensource_storage
document_outline: Teach the Large Language Model about integrating Ceph with OpenStack Keystone service.
document:
  repo: git@github.com:pavankumarag/ceph-instructlab-taxonomy-data.git
  commit: b60d0d0
  patterns: [upstream/doc/radosgw/keystone*.md]
seed_examples:
  - context: |
      **Integrating with OpenStack Keystone** allows the Ceph Object Gateway to use Keystone
      as the identity authority. This integration ensures that users authorized by Keystone
      can seamlessly access the Ceph Object Gateway, with automatic user creation if the user
      does not already exist. A Keystone-validated token is accepted as valid by the gateway.
    questions_and_answers:
      - question: |
          What is the purpose of integrating Ceph Object Gateway with Keystone?
        answer: |
          It allows Keystone to act as the identity authority for the Ceph Object Gateway, enabling
          seamless access for authorized users.
      - question: |
          What configuration file section is used for Keystone integration?
        answer: |
          The `[client.radosgw.gateway]` section in the Ceph configuration file is used.
      - question: |
          How are Keystone service tenant credentials configured for v2.0 API?
        answer: |
          Service tenant credentials are set using `rgw keystone admin user`, `rgw keystone admin
          password`, and `rgw keystone admin tenant` options.
      - question: |
          What does the `rgw keystone accepted roles` configuration specify?
        answer: |
          It specifies the user roles that are allowed to access the Ceph Object Gateway.
      - question: |
          How does Keystone support object storage in OpenStack?
        answer: |
          Keystone must be configured to point to the Ceph Object Gateway as an object-storage
          endpoint using the OpenStack service and endpoint commands.

  - context: |
      **Keystone Configuration for Ocata and Later** requires defining object-store endpoints
      that map to the Ceph Object Gateway. This setup ensures that OpenStack can recognize
      and use the gateway as a storage backend. The following configuration options are available
      for Keystone integration:
        - rgw keystone api version: Specifies the Keystone API version.
        - rgw keystone url: Keystone server URL and admin port.
        - rgw keystone admin token: Token for admin operations (use token path for security).
        - rgw keystone accepted roles: Defines the user roles accepted.
        - rgw keystone token cache size: Determines the number of tokens to cache.
        - rgw keystone implicit tenants: Creates private tenants for new users when set to true.
    questions_and_answers:
      - question: |
          What command is used to create an object-store service in OpenStack?
        answer: |
          The `openstack service create` command is used to create an object-store service.
      - question: |
          How do you configure object-store endpoint URLs?
        answer: |
          Use the `openstack endpoint create` command with public, admin, and internal URLs pointing
          to the Ceph Object Gateway.
      - question: |
          What suffix should be added to endpoint URLs if `rgw swift account in url = true` is set?
        answer: |
          The suffix `/v1/AUTH_%(tenant_id)s` must be added to endpoint URLs.
      - question: |
          What is the Keystone URL in the integration setup?
        answer: |
          It is the admin RESTful API URL of Keystone.
      - question: |
          How can you bypass SSL verification in Keystone integration?
        answer: |
          Set `rgw keystone verify ssl = false` to bypass SSL verification.

  - context: |
      **Cross Project Access** allows buckets in one project to be accessed by another.
      This feature requires specific configuration changes in both Ceph and Keystone.
    questions_and_answers:
      - question: |
          What does `rgw swift account in url = true` enable?
        answer: |
          It allows cross-project (tenant) access to buckets in the Ceph Object Gateway.
      - question: |
          What suffix must be used for cross-project object-store endpoints?
        answer: |
          The suffix `/v1/AUTH_$(project_id)s` must be included in the endpoint URLs.
      - question: |
          Why is cross-project access useful?
        answer: |
          It facilitates resource sharing between projects in OpenStack environments.
      - question: |
          What command configures cross-project endpoints in Keystone?
        answer: |
          The `openstack endpoint create` command with updated URLs is used.
      - question: |
          What is the purpose of AUTH_%(project_id)s in URLs?
        answer: |
          It maps requests to the correct project (tenant) in the Keystone integration.

  - context: |
      **Keystone Integration with S3 API** provides AWS-like access through the S3 protocol,
      while still leveraging Keystone for authentication. This enables compatibility with
      applications using S3 storage APIs.
      For Keystone v2.0 API, you can configure a service tenant, user, and password to avoid using the shared
      `rgw keystone admin token`. These credentials must have admin privileges. For v3 API, replace
      `rgw keystone admin tenant` with `rgw keystone admin domain` and `rgw keystone admin project`. This setup
      avoids the need for the shared secret token in production.
    questions_and_answers:
      - question: |
          What configuration option enables Keystone integration with the S3 API?
        answer: |
          The `rgw s3 auth use keystone` option must be set.
      - question: |
          What does the S3 API integration enable?
        answer: |
          It allows applications using the S3 API to authenticate via Keystone.
      - question: |
          How does the S3 API differ from Swift in Keystone integration?
        answer: |
          The S3 API uses AWS-like access and secret keys, while Swift uses Keystone tokens.
      - question: |
          Is Keystone integration with S3 API production-ready?
        answer: |
          Yes, with proper configuration, it is suitable for production environments.
      - question: |
          Where can details about S3 API integration be found?
        answer: |
          Documentation about S3 API integration can be found in the `s3/authentication` section.

  - context: |
      **Service Token Support** enables expired tokens to be used in combination with valid
      service tokens, allowing for uninterrupted operations in long-running processes.
      Service tokens allow expired user tokens in requests when
      paired with valid service tokens. The expiration cache can be tuned with `rgw keystone expired token cache
      expiration`.
    questions_and_answers:
      - question: |
          What does `rgw keystone service token enabled` do?
        answer: |
          It enables support for expired tokens when coupled with a valid service token.
      - question: |
          What configuration specifies acceptable service roles?
        answer: |
          The `rgw keystone service token accepted roles` option specifies valid service roles.
      - question: |
          Why is the `rgw keystone expired token cache expiration` option important?
        answer: |
          It determines the cache expiration time for expired tokens used with service tokens.
      - question: |
          What is the advantage of enabling service token support?
        answer: |
          It allows long-running processes to function beyond token expiration by validating
          service tokens.
      - question: |
          How should Keystone's `allow_expired_window` relate to Ceph's configuration?
        answer: |
          The `rgw keystone expired token cache expiration` must be shorter than Keystone's
          `allow_expired_window` setting.
